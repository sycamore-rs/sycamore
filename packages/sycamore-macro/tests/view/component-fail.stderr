error: expected either `(` or `{` after element tag
  --> tests/view/component-fail.rs:34:58
   |
34 |         let _: View<G> = view! { cx, PropComponent { prop: "123" } }; // Legacy syntax.
   |                                                          ^

error[E0425]: cannot find function, tuple struct or tuple variant `UnknownComponent` in this scope
  --> tests/view/component-fail.rs:25:38
   |
25 |         let _: View<G> = view! { cx, UnknownComponent() };
   |                                      ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function, tuple struct or tuple variant `UnknownComponent` in this scope
  --> tests/view/component-fail.rs:26:38
   |
26 |         let _: View<G> = view! { cx, UnknownComponent {} };
   |                                      ^^^^^^^^^^^^^^^^ not found in this scope

error[E0061]: this function takes 1 argument but 2 arguments were supplied
  --> tests/view/component-fail.rs:29:38
   |
29 |         let _: View<G> = view! { cx, Component(1) };
   |                                  --  ^^^^^^^^^ - supplied 2 arguments
   |                                      |
   |                                      expected 1 argument
   |
note: function defined here
  --> tests/view/component-fail.rs:17:4
   |
17 | fn Component<G: Html>(cx: Scope) -> View<G> {
   |    ^^^^^^^^^         -

error[E0061]: this function takes 2 arguments but 1 argument was supplied
  --> tests/view/component-fail.rs:31:38
   |
31 |         let _: View<G> = view! { cx, PropComponent() };
   |                                  --  ^^^^^^^^^^^^^ expected 2 arguments
   |                                  |
   |                                  supplied 1 argument
   |
note: function defined here
  --> tests/view/component-fail.rs:9:8
   |
9  | pub fn PropComponent<G: Html>(cx: Scope, Prop { prop: _ }: Prop) -> View<G> {
   |        ^^^^^^^^^^^^^         ------------

error[E0061]: this function takes 2 arguments but 1 argument was supplied
  --> tests/view/component-fail.rs:32:38
   |
32 |         let _: View<G> = view! { cx, PropComponent {} };
   |                                  --  ^^^^^^^^^^^^^ expected 2 arguments
   |                                  |
   |                                  supplied 1 argument
   |
note: function defined here
  --> tests/view/component-fail.rs:9:8
   |
9  | pub fn PropComponent<G: Html>(cx: Scope, Prop { prop: _ }: Prop) -> View<G> {
   |        ^^^^^^^^^^^^^         ------------

error[E0308]: mismatched types
  --> tests/view/component-fail.rs:33:57
   |
33 |         let _: View<G> = view! { cx, PropComponent(prop=123) };
   |                                                         ^^^ expected `&str`, found integer
